/* eslint-disable */
import { type NextPage } from "next";
import styles from "./transfer.module.css";
import Head from "next/head";
import React, { useState, useEffect } from "react";
import { Metaplex } from '@metaplex-foundation/js';
import { clusterApiUrl, Connection, type PublicKey } from '@solana/web3.js';
import { useWallet } from "@solana/wallet-adapter-react";

type Option = {
    key: string;
    value: string;
};

const _connection = new Connection(clusterApiUrl('devnet'));
const mx = Metaplex.make(_connection);

const Transfer: NextPage = () => {

    const { publicKey } = useWallet();
    
    const [list, setList] = useState<any[]>([]);

    const fetchNFTs = async (length: number, _publicKey: PublicKey) => {
        if (length === 0) {
          try {
            const aux = await mx.nfts().findAllByOwner({ owner: _publicKey });
            console.log(aux);
            aux.forEach((item) => {
                if (item.model == "metadata") addElementsToList(item.name, item.mintAddress.toString());
            });
            addElementsToList("", "");
            // return aux;
          } catch (e) {
            console.error(e);
          }
        }
    };
    
    useEffect(() => {
        if(publicKey == null){
            return;
        }
        fetchNFTs(list.length, publicKey);
    }, [publicKey]);

    const [formData, setFormData] = useState({
        wallet: "",
        certificate: "",
        privateKey: "",
    });

      const handleFormSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
        event.preventDefault();
    
        // await PrepareTransaction();
        if (formData.privateKey === "" || formData.wallet === "" || formData.certificate === "") {
          alert("missing data");
        }
        console.log(formData.certificate);
        const response = await fetch("https://kawi-cpg9.vercel.app/api/transact", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            OwnerSecretKey: formData.privateKey,
            reciberWaller: formData.wallet,
            tokenHash: formData.certificate,
          }),
        });
        console.log(response);
        if (response.status === 200) {
            alert("transfer made");
          } else {
            alert("transfer error");
          }
        };

        const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {            
            const { name, value } = event.target;
            setFormData((prevData) => ({
              ...prevData,
              [name]: value,
            }));
          };

        const handleInputChange = ({ target }: React.ChangeEvent<HTMLInputElement>) => {
            const { name, value } = target;
            setFormData((prevData) => ({
                ...prevData,
                [name]: value
            }));
        }
        
        const addElementsToList = (text: string, value: string) => {
        const newOption: Option = { key: text, value: value };
        setList((prevList) => [...prevList, newOption]);
        };

    return (
        <>
        <Head>
            <title>Transfer a Certificate</title>
            <meta name="description" content="Generated by create-t3-app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className={styles.main}>
            <div className={styles.container}>
                <h1 className={styles.title}>
                    Transfer a <span className={styles.pinkSpan}>Certificate:</span>
                </h1>
                <form onSubmit={handleFormSubmit}>
                <p className={styles.showcaseText}>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Turpis egestas maecenas pharetra convallis posuere morbi leo. Et tortor consequat id porta nibh venenatis. Massa eget egestas purus viverra accumsan in. Turpis nunc eget lorem dolor.</p>
                    <div className="col-span-6 sm:col-span-3">
                        <label htmlFor="country" className={styles.blanco}>
                            Choose the certificate
                        </label>
                        <select
                            id="certificate"
                            name="certificate"
                            className={styles.select}
                            onChange={handleSelectChange}
                            value={formData.certificate}
                        >
                            {list.map(({ key, value }) => (
                                <option key={value} value={value}>{key}</option>
                            ))}
                        </select>
                    </div>
                    <div className="mt-1 text-gray-400 flex justify-end hover:underline">
                        <a href="/mint" className={styles.link}>
                            <p> Need another certificate? Click here to add it </p>
                        </a>
                    </div>

                    <div className="mt-5 col-span-6 sm:col-span-3">
                        <label className={styles.blanco} >Wallet ID</label>
                        <input
                            name="wallet"
                            type="text"
                            placeholder="e.g. a6ffed9-4252-427e-af7d-3dcaaf2db2df"
                            className={styles.input}
                            onChange={handleInputChange}
                            value={formData.wallet}
                        />
                    </div>

                    <div className="mt-5 col-span-6 sm:col-span-3">
                        <label className={styles.blanco} >Private Key</label>
                        <input
                            name="privateKey"
                            type="text"
                            placeholder="e.g. a6ffed9-4252-427e-af7d-3dcaaf2db2df"
                            className={styles.input}
                            onChange={handleInputChange}
                            value={formData.privateKey}
                        />
                    </div>

                    <div className={styles.buttonContainer}>
                        <button type="submit" className={styles.buttonSubmit}>Register</button>
                    </div>
                </form>
            </div>
        </main>
        </>
    );
};

export default Transfer;
/* eslint-disable */